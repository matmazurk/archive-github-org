// Code generated by schema-generate. DO NOT EDIT.

package main

import (
    "bytes"
    "encoding/json"
    "errors"
)

// Root
type Root []*MinimalRepository

// AdvancedSecurity 
type AdvancedSecurity struct {
  Status string `json:"status,omitempty"`
}

// CodeOfConduct Code Of Conduct
type CodeOfConduct struct {
  Body string `json:"body,omitempty"`
  HtmlUrl interface{} `json:"html_url"`
  Key string `json:"key"`
  Name string `json:"name"`
  Url string `json:"url"`
}

// DependabotSecurityUpdates Enable or disable Dependabot security updates for the repository.
type DependabotSecurityUpdates struct {

  // The enablement status of Dependabot security updates for the repository.
  Status string `json:"status,omitempty"`
}

// License_object 
type License_object struct {
  Key string `json:"key,omitempty"`
  Name string `json:"name,omitempty"`
  NodeId string `json:"node_id,omitempty"`
  SpdxId string `json:"spdx_id,omitempty"`
  Url string `json:"url,omitempty"`
}

// MinimalRepository Minimal Repository
type MinimalRepository struct {
  AllowForking bool `json:"allow_forking,omitempty"`
  ArchiveUrl string `json:"archive_url"`
  Archived bool `json:"archived,omitempty"`
  AssigneesUrl string `json:"assignees_url"`
  BlobsUrl string `json:"blobs_url"`
  BranchesUrl string `json:"branches_url"`
  CloneUrl string `json:"clone_url,omitempty"`

  // Code Of Conduct
  CodeOfConduct *CodeOfConduct `json:"code_of_conduct,omitempty"`
  CollaboratorsUrl string `json:"collaborators_url"`
  CommentsUrl string `json:"comments_url"`
  CommitsUrl string `json:"commits_url"`
  CompareUrl string `json:"compare_url"`
  ContentsUrl string `json:"contents_url"`
  ContributorsUrl string `json:"contributors_url"`
  CreatedAt interface{} `json:"created_at,omitempty"`
  DefaultBranch string `json:"default_branch,omitempty"`
  DeleteBranchOnMerge bool `json:"delete_branch_on_merge,omitempty"`
  DeploymentsUrl string `json:"deployments_url"`
  Description interface{} `json:"description"`
  Disabled bool `json:"disabled,omitempty"`
  DownloadsUrl string `json:"downloads_url"`
  EventsUrl string `json:"events_url"`
  Fork bool `json:"fork"`
  Forks int `json:"forks,omitempty"`
  ForksCount int `json:"forks_count,omitempty"`
  ForksUrl string `json:"forks_url"`
  FullName string `json:"full_name"`
  GitCommitsUrl string `json:"git_commits_url"`
  GitRefsUrl string `json:"git_refs_url"`
  GitTagsUrl string `json:"git_tags_url"`
  GitUrl string `json:"git_url,omitempty"`
  HasDiscussions bool `json:"has_discussions,omitempty"`
  HasDownloads bool `json:"has_downloads,omitempty"`
  HasIssues bool `json:"has_issues,omitempty"`
  HasPages bool `json:"has_pages,omitempty"`
  HasProjects bool `json:"has_projects,omitempty"`
  HasWiki bool `json:"has_wiki,omitempty"`
  Homepage interface{} `json:"homepage,omitempty"`
  HooksUrl string `json:"hooks_url"`
  HtmlUrl string `json:"html_url"`
  Id int `json:"id"`
  IsTemplate bool `json:"is_template,omitempty"`
  IssueCommentUrl string `json:"issue_comment_url"`
  IssueEventsUrl string `json:"issue_events_url"`
  IssuesUrl string `json:"issues_url"`
  KeysUrl string `json:"keys_url"`
  LabelsUrl string `json:"labels_url"`
  Language interface{} `json:"language,omitempty"`
  LanguagesUrl string `json:"languages_url"`
  License interface{} `json:"license,omitempty"`
  MergesUrl string `json:"merges_url"`
  MilestonesUrl string `json:"milestones_url"`
  MirrorUrl interface{} `json:"mirror_url,omitempty"`
  Name string `json:"name"`
  NetworkCount int `json:"network_count,omitempty"`
  NodeId string `json:"node_id"`
  NotificationsUrl string `json:"notifications_url"`
  OpenIssues int `json:"open_issues,omitempty"`
  OpenIssuesCount int `json:"open_issues_count,omitempty"`

  // A GitHub user.
  Owner *SimpleUser `json:"owner"`
  Permissions *Permissions `json:"permissions,omitempty"`
  Private bool `json:"private"`
  PullsUrl string `json:"pulls_url"`
  PushedAt interface{} `json:"pushed_at,omitempty"`
  ReleasesUrl string `json:"releases_url"`
  RoleName string `json:"role_name,omitempty"`
  SecurityAndAnalysis interface{} `json:"security_and_analysis,omitempty"`

  // The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
  Size int `json:"size,omitempty"`
  SshUrl string `json:"ssh_url,omitempty"`
  StargazersCount int `json:"stargazers_count,omitempty"`
  StargazersUrl string `json:"stargazers_url"`
  StatusesUrl string `json:"statuses_url"`
  SubscribersCount int `json:"subscribers_count,omitempty"`
  SubscribersUrl string `json:"subscribers_url"`
  SubscriptionUrl string `json:"subscription_url"`
  SvnUrl string `json:"svn_url,omitempty"`
  TagsUrl string `json:"tags_url"`
  TeamsUrl string `json:"teams_url"`
  TempCloneToken string `json:"temp_clone_token,omitempty"`
  Topics []string `json:"topics,omitempty"`
  TreesUrl string `json:"trees_url"`
  UpdatedAt interface{} `json:"updated_at,omitempty"`
  Url string `json:"url"`
  Visibility string `json:"visibility,omitempty"`
  Watchers int `json:"watchers,omitempty"`
  WatchersCount int `json:"watchers_count,omitempty"`
  WebCommitSignoffRequired bool `json:"web_commit_signoff_required,omitempty"`
}

// Permissions 
type Permissions struct {
  Admin bool `json:"admin,omitempty"`
  Maintain bool `json:"maintain,omitempty"`
  Pull bool `json:"pull,omitempty"`
  Push bool `json:"push,omitempty"`
  Triage bool `json:"triage,omitempty"`
}

// SecretScanning 
type SecretScanning struct {
  Status string `json:"status,omitempty"`
}

// SecretScanningPushProtection 
type SecretScanningPushProtection struct {
  Status string `json:"status,omitempty"`
}

// SecurityAndAnalysis_object 
type SecurityAndAnalysis_object struct {
  AdvancedSecurity *AdvancedSecurity `json:"advanced_security,omitempty"`

  // Enable or disable Dependabot security updates for the repository.
  DependabotSecurityUpdates *DependabotSecurityUpdates `json:"dependabot_security_updates,omitempty"`
  SecretScanning *SecretScanning `json:"secret_scanning,omitempty"`
  SecretScanningPushProtection *SecretScanningPushProtection `json:"secret_scanning_push_protection,omitempty"`
}

// SimpleUser A GitHub user.
type SimpleUser struct {
  AvatarUrl string `json:"avatar_url"`
  Email interface{} `json:"email,omitempty"`
  EventsUrl string `json:"events_url"`
  FollowersUrl string `json:"followers_url"`
  FollowingUrl string `json:"following_url"`
  GistsUrl string `json:"gists_url"`
  GravatarId interface{} `json:"gravatar_id"`
  HtmlUrl string `json:"html_url"`
  Id int `json:"id"`
  Login string `json:"login"`
  Name interface{} `json:"name,omitempty"`
  NodeId string `json:"node_id"`
  OrganizationsUrl string `json:"organizations_url"`
  ReceivedEventsUrl string `json:"received_events_url"`
  ReposUrl string `json:"repos_url"`
  SiteAdmin bool `json:"site_admin"`
  StarredAt string `json:"starred_at,omitempty"`
  StarredUrl string `json:"starred_url"`
  SubscriptionsUrl string `json:"subscriptions_url"`
  Type string `json:"type"`
  Url string `json:"url"`
}

func (strct *CodeOfConduct) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "body" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"body\": ")
	if tmp, err := json.Marshal(strct.Body); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "HtmlUrl" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "html_url" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"html_url\": ")
	if tmp, err := json.Marshal(strct.HtmlUrl); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Name" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Url" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "url" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"url\": ")
	if tmp, err := json.Marshal(strct.Url); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *CodeOfConduct) UnmarshalJSON(b []byte) error {
    html_urlReceived := false
    keyReceived := false
    nameReceived := false
    urlReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "body":
            if err := json.Unmarshal([]byte(v), &strct.Body); err != nil {
                return err
             }
        case "html_url":
            if err := json.Unmarshal([]byte(v), &strct.HtmlUrl); err != nil {
                return err
             }
            html_urlReceived = true
        case "key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            keyReceived = true
        case "name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
            nameReceived = true
        case "url":
            if err := json.Unmarshal([]byte(v), &strct.Url); err != nil {
                return err
             }
            urlReceived = true
        }
    }
    // check if html_url (a required property) was received
    if !html_urlReceived {
        return errors.New("\"html_url\" is required but was not present")
    }
    // check if key (a required property) was received
    if !keyReceived {
        return errors.New("\"key\" is required but was not present")
    }
    // check if name (a required property) was received
    if !nameReceived {
        return errors.New("\"name\" is required but was not present")
    }
    // check if url (a required property) was received
    if !urlReceived {
        return errors.New("\"url\" is required but was not present")
    }
    return nil
}

func (strct *MinimalRepository) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "allow_forking" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"allow_forking\": ")
	if tmp, err := json.Marshal(strct.AllowForking); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "ArchiveUrl" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "archive_url" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"archive_url\": ")
	if tmp, err := json.Marshal(strct.ArchiveUrl); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "archived" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"archived\": ")
	if tmp, err := json.Marshal(strct.Archived); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "AssigneesUrl" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "assignees_url" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"assignees_url\": ")
	if tmp, err := json.Marshal(strct.AssigneesUrl); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "BlobsUrl" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "blobs_url" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"blobs_url\": ")
	if tmp, err := json.Marshal(strct.BlobsUrl); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "BranchesUrl" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "branches_url" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"branches_url\": ")
	if tmp, err := json.Marshal(strct.BranchesUrl); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "clone_url" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"clone_url\": ")
	if tmp, err := json.Marshal(strct.CloneUrl); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "code_of_conduct" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"code_of_conduct\": ")
	if tmp, err := json.Marshal(strct.CodeOfConduct); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "CollaboratorsUrl" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "collaborators_url" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"collaborators_url\": ")
	if tmp, err := json.Marshal(strct.CollaboratorsUrl); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "CommentsUrl" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "comments_url" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"comments_url\": ")
	if tmp, err := json.Marshal(strct.CommentsUrl); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "CommitsUrl" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "commits_url" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"commits_url\": ")
	if tmp, err := json.Marshal(strct.CommitsUrl); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "CompareUrl" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "compare_url" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"compare_url\": ")
	if tmp, err := json.Marshal(strct.CompareUrl); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "ContentsUrl" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "contents_url" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"contents_url\": ")
	if tmp, err := json.Marshal(strct.ContentsUrl); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "ContributorsUrl" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "contributors_url" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"contributors_url\": ")
	if tmp, err := json.Marshal(strct.ContributorsUrl); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "created_at" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"created_at\": ")
	if tmp, err := json.Marshal(strct.CreatedAt); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "default_branch" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"default_branch\": ")
	if tmp, err := json.Marshal(strct.DefaultBranch); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "delete_branch_on_merge" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"delete_branch_on_merge\": ")
	if tmp, err := json.Marshal(strct.DeleteBranchOnMerge); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "DeploymentsUrl" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "deployments_url" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"deployments_url\": ")
	if tmp, err := json.Marshal(strct.DeploymentsUrl); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Description" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "description" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "disabled" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"disabled\": ")
	if tmp, err := json.Marshal(strct.Disabled); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "DownloadsUrl" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "downloads_url" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"downloads_url\": ")
	if tmp, err := json.Marshal(strct.DownloadsUrl); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "EventsUrl" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "events_url" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"events_url\": ")
	if tmp, err := json.Marshal(strct.EventsUrl); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Fork" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "fork" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"fork\": ")
	if tmp, err := json.Marshal(strct.Fork); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "forks" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"forks\": ")
	if tmp, err := json.Marshal(strct.Forks); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "forks_count" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"forks_count\": ")
	if tmp, err := json.Marshal(strct.ForksCount); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "ForksUrl" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "forks_url" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"forks_url\": ")
	if tmp, err := json.Marshal(strct.ForksUrl); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "FullName" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "full_name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"full_name\": ")
	if tmp, err := json.Marshal(strct.FullName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "GitCommitsUrl" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "git_commits_url" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"git_commits_url\": ")
	if tmp, err := json.Marshal(strct.GitCommitsUrl); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "GitRefsUrl" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "git_refs_url" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"git_refs_url\": ")
	if tmp, err := json.Marshal(strct.GitRefsUrl); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "GitTagsUrl" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "git_tags_url" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"git_tags_url\": ")
	if tmp, err := json.Marshal(strct.GitTagsUrl); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "git_url" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"git_url\": ")
	if tmp, err := json.Marshal(strct.GitUrl); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "has_discussions" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"has_discussions\": ")
	if tmp, err := json.Marshal(strct.HasDiscussions); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "has_downloads" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"has_downloads\": ")
	if tmp, err := json.Marshal(strct.HasDownloads); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "has_issues" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"has_issues\": ")
	if tmp, err := json.Marshal(strct.HasIssues); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "has_pages" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"has_pages\": ")
	if tmp, err := json.Marshal(strct.HasPages); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "has_projects" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"has_projects\": ")
	if tmp, err := json.Marshal(strct.HasProjects); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "has_wiki" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"has_wiki\": ")
	if tmp, err := json.Marshal(strct.HasWiki); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "homepage" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"homepage\": ")
	if tmp, err := json.Marshal(strct.Homepage); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "HooksUrl" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "hooks_url" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"hooks_url\": ")
	if tmp, err := json.Marshal(strct.HooksUrl); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "HtmlUrl" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "html_url" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"html_url\": ")
	if tmp, err := json.Marshal(strct.HtmlUrl); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Id" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "id" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "is_template" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"is_template\": ")
	if tmp, err := json.Marshal(strct.IsTemplate); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "IssueCommentUrl" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "issue_comment_url" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"issue_comment_url\": ")
	if tmp, err := json.Marshal(strct.IssueCommentUrl); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "IssueEventsUrl" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "issue_events_url" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"issue_events_url\": ")
	if tmp, err := json.Marshal(strct.IssueEventsUrl); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "IssuesUrl" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "issues_url" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"issues_url\": ")
	if tmp, err := json.Marshal(strct.IssuesUrl); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "KeysUrl" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "keys_url" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"keys_url\": ")
	if tmp, err := json.Marshal(strct.KeysUrl); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "LabelsUrl" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "labels_url" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"labels_url\": ")
	if tmp, err := json.Marshal(strct.LabelsUrl); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "language" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"language\": ")
	if tmp, err := json.Marshal(strct.Language); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "LanguagesUrl" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "languages_url" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"languages_url\": ")
	if tmp, err := json.Marshal(strct.LanguagesUrl); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "license" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"license\": ")
	if tmp, err := json.Marshal(strct.License); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "MergesUrl" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "merges_url" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"merges_url\": ")
	if tmp, err := json.Marshal(strct.MergesUrl); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "MilestonesUrl" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "milestones_url" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"milestones_url\": ")
	if tmp, err := json.Marshal(strct.MilestonesUrl); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "mirror_url" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"mirror_url\": ")
	if tmp, err := json.Marshal(strct.MirrorUrl); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Name" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "network_count" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"network_count\": ")
	if tmp, err := json.Marshal(strct.NetworkCount); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "NodeId" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "node_id" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"node_id\": ")
	if tmp, err := json.Marshal(strct.NodeId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "NotificationsUrl" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "notifications_url" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"notifications_url\": ")
	if tmp, err := json.Marshal(strct.NotificationsUrl); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "open_issues" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"open_issues\": ")
	if tmp, err := json.Marshal(strct.OpenIssues); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "open_issues_count" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"open_issues_count\": ")
	if tmp, err := json.Marshal(strct.OpenIssuesCount); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Owner" field is required
    if strct.Owner == nil {
        return nil, errors.New("owner is a required field")
    }
    // Marshal the "owner" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"owner\": ")
	if tmp, err := json.Marshal(strct.Owner); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "permissions" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"permissions\": ")
	if tmp, err := json.Marshal(strct.Permissions); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Private" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "private" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"private\": ")
	if tmp, err := json.Marshal(strct.Private); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "PullsUrl" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "pulls_url" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"pulls_url\": ")
	if tmp, err := json.Marshal(strct.PullsUrl); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "pushed_at" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"pushed_at\": ")
	if tmp, err := json.Marshal(strct.PushedAt); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "ReleasesUrl" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "releases_url" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"releases_url\": ")
	if tmp, err := json.Marshal(strct.ReleasesUrl); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "role_name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"role_name\": ")
	if tmp, err := json.Marshal(strct.RoleName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "security_and_analysis" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"security_and_analysis\": ")
	if tmp, err := json.Marshal(strct.SecurityAndAnalysis); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "size" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"size\": ")
	if tmp, err := json.Marshal(strct.Size); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ssh_url" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ssh_url\": ")
	if tmp, err := json.Marshal(strct.SshUrl); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "stargazers_count" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"stargazers_count\": ")
	if tmp, err := json.Marshal(strct.StargazersCount); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "StargazersUrl" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "stargazers_url" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"stargazers_url\": ")
	if tmp, err := json.Marshal(strct.StargazersUrl); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "StatusesUrl" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "statuses_url" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"statuses_url\": ")
	if tmp, err := json.Marshal(strct.StatusesUrl); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "subscribers_count" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"subscribers_count\": ")
	if tmp, err := json.Marshal(strct.SubscribersCount); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "SubscribersUrl" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "subscribers_url" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"subscribers_url\": ")
	if tmp, err := json.Marshal(strct.SubscribersUrl); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "SubscriptionUrl" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "subscription_url" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"subscription_url\": ")
	if tmp, err := json.Marshal(strct.SubscriptionUrl); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "svn_url" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"svn_url\": ")
	if tmp, err := json.Marshal(strct.SvnUrl); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "TagsUrl" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "tags_url" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"tags_url\": ")
	if tmp, err := json.Marshal(strct.TagsUrl); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "TeamsUrl" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "teams_url" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"teams_url\": ")
	if tmp, err := json.Marshal(strct.TeamsUrl); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "temp_clone_token" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"temp_clone_token\": ")
	if tmp, err := json.Marshal(strct.TempCloneToken); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "topics" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"topics\": ")
	if tmp, err := json.Marshal(strct.Topics); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "TreesUrl" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "trees_url" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"trees_url\": ")
	if tmp, err := json.Marshal(strct.TreesUrl); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "updated_at" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"updated_at\": ")
	if tmp, err := json.Marshal(strct.UpdatedAt); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Url" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "url" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"url\": ")
	if tmp, err := json.Marshal(strct.Url); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "visibility" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"visibility\": ")
	if tmp, err := json.Marshal(strct.Visibility); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "watchers" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"watchers\": ")
	if tmp, err := json.Marshal(strct.Watchers); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "watchers_count" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"watchers_count\": ")
	if tmp, err := json.Marshal(strct.WatchersCount); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "web_commit_signoff_required" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"web_commit_signoff_required\": ")
	if tmp, err := json.Marshal(strct.WebCommitSignoffRequired); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *MinimalRepository) UnmarshalJSON(b []byte) error {
    archive_urlReceived := false
    assignees_urlReceived := false
    blobs_urlReceived := false
    branches_urlReceived := false
    collaborators_urlReceived := false
    comments_urlReceived := false
    commits_urlReceived := false
    compare_urlReceived := false
    contents_urlReceived := false
    contributors_urlReceived := false
    deployments_urlReceived := false
    descriptionReceived := false
    downloads_urlReceived := false
    events_urlReceived := false
    forkReceived := false
    forks_urlReceived := false
    full_nameReceived := false
    git_commits_urlReceived := false
    git_refs_urlReceived := false
    git_tags_urlReceived := false
    hooks_urlReceived := false
    html_urlReceived := false
    idReceived := false
    issue_comment_urlReceived := false
    issue_events_urlReceived := false
    issues_urlReceived := false
    keys_urlReceived := false
    labels_urlReceived := false
    languages_urlReceived := false
    merges_urlReceived := false
    milestones_urlReceived := false
    nameReceived := false
    node_idReceived := false
    notifications_urlReceived := false
    ownerReceived := false
    privateReceived := false
    pulls_urlReceived := false
    releases_urlReceived := false
    stargazers_urlReceived := false
    statuses_urlReceived := false
    subscribers_urlReceived := false
    subscription_urlReceived := false
    tags_urlReceived := false
    teams_urlReceived := false
    trees_urlReceived := false
    urlReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "allow_forking":
            if err := json.Unmarshal([]byte(v), &strct.AllowForking); err != nil {
                return err
             }
        case "archive_url":
            if err := json.Unmarshal([]byte(v), &strct.ArchiveUrl); err != nil {
                return err
             }
            archive_urlReceived = true
        case "archived":
            if err := json.Unmarshal([]byte(v), &strct.Archived); err != nil {
                return err
             }
        case "assignees_url":
            if err := json.Unmarshal([]byte(v), &strct.AssigneesUrl); err != nil {
                return err
             }
            assignees_urlReceived = true
        case "blobs_url":
            if err := json.Unmarshal([]byte(v), &strct.BlobsUrl); err != nil {
                return err
             }
            blobs_urlReceived = true
        case "branches_url":
            if err := json.Unmarshal([]byte(v), &strct.BranchesUrl); err != nil {
                return err
             }
            branches_urlReceived = true
        case "clone_url":
            if err := json.Unmarshal([]byte(v), &strct.CloneUrl); err != nil {
                return err
             }
        case "code_of_conduct":
            if err := json.Unmarshal([]byte(v), &strct.CodeOfConduct); err != nil {
                return err
             }
        case "collaborators_url":
            if err := json.Unmarshal([]byte(v), &strct.CollaboratorsUrl); err != nil {
                return err
             }
            collaborators_urlReceived = true
        case "comments_url":
            if err := json.Unmarshal([]byte(v), &strct.CommentsUrl); err != nil {
                return err
             }
            comments_urlReceived = true
        case "commits_url":
            if err := json.Unmarshal([]byte(v), &strct.CommitsUrl); err != nil {
                return err
             }
            commits_urlReceived = true
        case "compare_url":
            if err := json.Unmarshal([]byte(v), &strct.CompareUrl); err != nil {
                return err
             }
            compare_urlReceived = true
        case "contents_url":
            if err := json.Unmarshal([]byte(v), &strct.ContentsUrl); err != nil {
                return err
             }
            contents_urlReceived = true
        case "contributors_url":
            if err := json.Unmarshal([]byte(v), &strct.ContributorsUrl); err != nil {
                return err
             }
            contributors_urlReceived = true
        case "created_at":
            if err := json.Unmarshal([]byte(v), &strct.CreatedAt); err != nil {
                return err
             }
        case "default_branch":
            if err := json.Unmarshal([]byte(v), &strct.DefaultBranch); err != nil {
                return err
             }
        case "delete_branch_on_merge":
            if err := json.Unmarshal([]byte(v), &strct.DeleteBranchOnMerge); err != nil {
                return err
             }
        case "deployments_url":
            if err := json.Unmarshal([]byte(v), &strct.DeploymentsUrl); err != nil {
                return err
             }
            deployments_urlReceived = true
        case "description":
            if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
                return err
             }
            descriptionReceived = true
        case "disabled":
            if err := json.Unmarshal([]byte(v), &strct.Disabled); err != nil {
                return err
             }
        case "downloads_url":
            if err := json.Unmarshal([]byte(v), &strct.DownloadsUrl); err != nil {
                return err
             }
            downloads_urlReceived = true
        case "events_url":
            if err := json.Unmarshal([]byte(v), &strct.EventsUrl); err != nil {
                return err
             }
            events_urlReceived = true
        case "fork":
            if err := json.Unmarshal([]byte(v), &strct.Fork); err != nil {
                return err
             }
            forkReceived = true
        case "forks":
            if err := json.Unmarshal([]byte(v), &strct.Forks); err != nil {
                return err
             }
        case "forks_count":
            if err := json.Unmarshal([]byte(v), &strct.ForksCount); err != nil {
                return err
             }
        case "forks_url":
            if err := json.Unmarshal([]byte(v), &strct.ForksUrl); err != nil {
                return err
             }
            forks_urlReceived = true
        case "full_name":
            if err := json.Unmarshal([]byte(v), &strct.FullName); err != nil {
                return err
             }
            full_nameReceived = true
        case "git_commits_url":
            if err := json.Unmarshal([]byte(v), &strct.GitCommitsUrl); err != nil {
                return err
             }
            git_commits_urlReceived = true
        case "git_refs_url":
            if err := json.Unmarshal([]byte(v), &strct.GitRefsUrl); err != nil {
                return err
             }
            git_refs_urlReceived = true
        case "git_tags_url":
            if err := json.Unmarshal([]byte(v), &strct.GitTagsUrl); err != nil {
                return err
             }
            git_tags_urlReceived = true
        case "git_url":
            if err := json.Unmarshal([]byte(v), &strct.GitUrl); err != nil {
                return err
             }
        case "has_discussions":
            if err := json.Unmarshal([]byte(v), &strct.HasDiscussions); err != nil {
                return err
             }
        case "has_downloads":
            if err := json.Unmarshal([]byte(v), &strct.HasDownloads); err != nil {
                return err
             }
        case "has_issues":
            if err := json.Unmarshal([]byte(v), &strct.HasIssues); err != nil {
                return err
             }
        case "has_pages":
            if err := json.Unmarshal([]byte(v), &strct.HasPages); err != nil {
                return err
             }
        case "has_projects":
            if err := json.Unmarshal([]byte(v), &strct.HasProjects); err != nil {
                return err
             }
        case "has_wiki":
            if err := json.Unmarshal([]byte(v), &strct.HasWiki); err != nil {
                return err
             }
        case "homepage":
            if err := json.Unmarshal([]byte(v), &strct.Homepage); err != nil {
                return err
             }
        case "hooks_url":
            if err := json.Unmarshal([]byte(v), &strct.HooksUrl); err != nil {
                return err
             }
            hooks_urlReceived = true
        case "html_url":
            if err := json.Unmarshal([]byte(v), &strct.HtmlUrl); err != nil {
                return err
             }
            html_urlReceived = true
        case "id":
            if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
                return err
             }
            idReceived = true
        case "is_template":
            if err := json.Unmarshal([]byte(v), &strct.IsTemplate); err != nil {
                return err
             }
        case "issue_comment_url":
            if err := json.Unmarshal([]byte(v), &strct.IssueCommentUrl); err != nil {
                return err
             }
            issue_comment_urlReceived = true
        case "issue_events_url":
            if err := json.Unmarshal([]byte(v), &strct.IssueEventsUrl); err != nil {
                return err
             }
            issue_events_urlReceived = true
        case "issues_url":
            if err := json.Unmarshal([]byte(v), &strct.IssuesUrl); err != nil {
                return err
             }
            issues_urlReceived = true
        case "keys_url":
            if err := json.Unmarshal([]byte(v), &strct.KeysUrl); err != nil {
                return err
             }
            keys_urlReceived = true
        case "labels_url":
            if err := json.Unmarshal([]byte(v), &strct.LabelsUrl); err != nil {
                return err
             }
            labels_urlReceived = true
        case "language":
            if err := json.Unmarshal([]byte(v), &strct.Language); err != nil {
                return err
             }
        case "languages_url":
            if err := json.Unmarshal([]byte(v), &strct.LanguagesUrl); err != nil {
                return err
             }
            languages_urlReceived = true
        case "license":
            if err := json.Unmarshal([]byte(v), &strct.License); err != nil {
                return err
             }
        case "merges_url":
            if err := json.Unmarshal([]byte(v), &strct.MergesUrl); err != nil {
                return err
             }
            merges_urlReceived = true
        case "milestones_url":
            if err := json.Unmarshal([]byte(v), &strct.MilestonesUrl); err != nil {
                return err
             }
            milestones_urlReceived = true
        case "mirror_url":
            if err := json.Unmarshal([]byte(v), &strct.MirrorUrl); err != nil {
                return err
             }
        case "name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
            nameReceived = true
        case "network_count":
            if err := json.Unmarshal([]byte(v), &strct.NetworkCount); err != nil {
                return err
             }
        case "node_id":
            if err := json.Unmarshal([]byte(v), &strct.NodeId); err != nil {
                return err
             }
            node_idReceived = true
        case "notifications_url":
            if err := json.Unmarshal([]byte(v), &strct.NotificationsUrl); err != nil {
                return err
             }
            notifications_urlReceived = true
        case "open_issues":
            if err := json.Unmarshal([]byte(v), &strct.OpenIssues); err != nil {
                return err
             }
        case "open_issues_count":
            if err := json.Unmarshal([]byte(v), &strct.OpenIssuesCount); err != nil {
                return err
             }
        case "owner":
            if err := json.Unmarshal([]byte(v), &strct.Owner); err != nil {
                return err
             }
            ownerReceived = true
        case "permissions":
            if err := json.Unmarshal([]byte(v), &strct.Permissions); err != nil {
                return err
             }
        case "private":
            if err := json.Unmarshal([]byte(v), &strct.Private); err != nil {
                return err
             }
            privateReceived = true
        case "pulls_url":
            if err := json.Unmarshal([]byte(v), &strct.PullsUrl); err != nil {
                return err
             }
            pulls_urlReceived = true
        case "pushed_at":
            if err := json.Unmarshal([]byte(v), &strct.PushedAt); err != nil {
                return err
             }
        case "releases_url":
            if err := json.Unmarshal([]byte(v), &strct.ReleasesUrl); err != nil {
                return err
             }
            releases_urlReceived = true
        case "role_name":
            if err := json.Unmarshal([]byte(v), &strct.RoleName); err != nil {
                return err
             }
        case "security_and_analysis":
            if err := json.Unmarshal([]byte(v), &strct.SecurityAndAnalysis); err != nil {
                return err
             }
        case "size":
            if err := json.Unmarshal([]byte(v), &strct.Size); err != nil {
                return err
             }
        case "ssh_url":
            if err := json.Unmarshal([]byte(v), &strct.SshUrl); err != nil {
                return err
             }
        case "stargazers_count":
            if err := json.Unmarshal([]byte(v), &strct.StargazersCount); err != nil {
                return err
             }
        case "stargazers_url":
            if err := json.Unmarshal([]byte(v), &strct.StargazersUrl); err != nil {
                return err
             }
            stargazers_urlReceived = true
        case "statuses_url":
            if err := json.Unmarshal([]byte(v), &strct.StatusesUrl); err != nil {
                return err
             }
            statuses_urlReceived = true
        case "subscribers_count":
            if err := json.Unmarshal([]byte(v), &strct.SubscribersCount); err != nil {
                return err
             }
        case "subscribers_url":
            if err := json.Unmarshal([]byte(v), &strct.SubscribersUrl); err != nil {
                return err
             }
            subscribers_urlReceived = true
        case "subscription_url":
            if err := json.Unmarshal([]byte(v), &strct.SubscriptionUrl); err != nil {
                return err
             }
            subscription_urlReceived = true
        case "svn_url":
            if err := json.Unmarshal([]byte(v), &strct.SvnUrl); err != nil {
                return err
             }
        case "tags_url":
            if err := json.Unmarshal([]byte(v), &strct.TagsUrl); err != nil {
                return err
             }
            tags_urlReceived = true
        case "teams_url":
            if err := json.Unmarshal([]byte(v), &strct.TeamsUrl); err != nil {
                return err
             }
            teams_urlReceived = true
        case "temp_clone_token":
            if err := json.Unmarshal([]byte(v), &strct.TempCloneToken); err != nil {
                return err
             }
        case "topics":
            if err := json.Unmarshal([]byte(v), &strct.Topics); err != nil {
                return err
             }
        case "trees_url":
            if err := json.Unmarshal([]byte(v), &strct.TreesUrl); err != nil {
                return err
             }
            trees_urlReceived = true
        case "updated_at":
            if err := json.Unmarshal([]byte(v), &strct.UpdatedAt); err != nil {
                return err
             }
        case "url":
            if err := json.Unmarshal([]byte(v), &strct.Url); err != nil {
                return err
             }
            urlReceived = true
        case "visibility":
            if err := json.Unmarshal([]byte(v), &strct.Visibility); err != nil {
                return err
             }
        case "watchers":
            if err := json.Unmarshal([]byte(v), &strct.Watchers); err != nil {
                return err
             }
        case "watchers_count":
            if err := json.Unmarshal([]byte(v), &strct.WatchersCount); err != nil {
                return err
             }
        case "web_commit_signoff_required":
            if err := json.Unmarshal([]byte(v), &strct.WebCommitSignoffRequired); err != nil {
                return err
             }
        }
    }
    // check if archive_url (a required property) was received
    if !archive_urlReceived {
        return errors.New("\"archive_url\" is required but was not present")
    }
    // check if assignees_url (a required property) was received
    if !assignees_urlReceived {
        return errors.New("\"assignees_url\" is required but was not present")
    }
    // check if blobs_url (a required property) was received
    if !blobs_urlReceived {
        return errors.New("\"blobs_url\" is required but was not present")
    }
    // check if branches_url (a required property) was received
    if !branches_urlReceived {
        return errors.New("\"branches_url\" is required but was not present")
    }
    // check if collaborators_url (a required property) was received
    if !collaborators_urlReceived {
        return errors.New("\"collaborators_url\" is required but was not present")
    }
    // check if comments_url (a required property) was received
    if !comments_urlReceived {
        return errors.New("\"comments_url\" is required but was not present")
    }
    // check if commits_url (a required property) was received
    if !commits_urlReceived {
        return errors.New("\"commits_url\" is required but was not present")
    }
    // check if compare_url (a required property) was received
    if !compare_urlReceived {
        return errors.New("\"compare_url\" is required but was not present")
    }
    // check if contents_url (a required property) was received
    if !contents_urlReceived {
        return errors.New("\"contents_url\" is required but was not present")
    }
    // check if contributors_url (a required property) was received
    if !contributors_urlReceived {
        return errors.New("\"contributors_url\" is required but was not present")
    }
    // check if deployments_url (a required property) was received
    if !deployments_urlReceived {
        return errors.New("\"deployments_url\" is required but was not present")
    }
    // check if description (a required property) was received
    if !descriptionReceived {
        return errors.New("\"description\" is required but was not present")
    }
    // check if downloads_url (a required property) was received
    if !downloads_urlReceived {
        return errors.New("\"downloads_url\" is required but was not present")
    }
    // check if events_url (a required property) was received
    if !events_urlReceived {
        return errors.New("\"events_url\" is required but was not present")
    }
    // check if fork (a required property) was received
    if !forkReceived {
        return errors.New("\"fork\" is required but was not present")
    }
    // check if forks_url (a required property) was received
    if !forks_urlReceived {
        return errors.New("\"forks_url\" is required but was not present")
    }
    // check if full_name (a required property) was received
    if !full_nameReceived {
        return errors.New("\"full_name\" is required but was not present")
    }
    // check if git_commits_url (a required property) was received
    if !git_commits_urlReceived {
        return errors.New("\"git_commits_url\" is required but was not present")
    }
    // check if git_refs_url (a required property) was received
    if !git_refs_urlReceived {
        return errors.New("\"git_refs_url\" is required but was not present")
    }
    // check if git_tags_url (a required property) was received
    if !git_tags_urlReceived {
        return errors.New("\"git_tags_url\" is required but was not present")
    }
    // check if hooks_url (a required property) was received
    if !hooks_urlReceived {
        return errors.New("\"hooks_url\" is required but was not present")
    }
    // check if html_url (a required property) was received
    if !html_urlReceived {
        return errors.New("\"html_url\" is required but was not present")
    }
    // check if id (a required property) was received
    if !idReceived {
        return errors.New("\"id\" is required but was not present")
    }
    // check if issue_comment_url (a required property) was received
    if !issue_comment_urlReceived {
        return errors.New("\"issue_comment_url\" is required but was not present")
    }
    // check if issue_events_url (a required property) was received
    if !issue_events_urlReceived {
        return errors.New("\"issue_events_url\" is required but was not present")
    }
    // check if issues_url (a required property) was received
    if !issues_urlReceived {
        return errors.New("\"issues_url\" is required but was not present")
    }
    // check if keys_url (a required property) was received
    if !keys_urlReceived {
        return errors.New("\"keys_url\" is required but was not present")
    }
    // check if labels_url (a required property) was received
    if !labels_urlReceived {
        return errors.New("\"labels_url\" is required but was not present")
    }
    // check if languages_url (a required property) was received
    if !languages_urlReceived {
        return errors.New("\"languages_url\" is required but was not present")
    }
    // check if merges_url (a required property) was received
    if !merges_urlReceived {
        return errors.New("\"merges_url\" is required but was not present")
    }
    // check if milestones_url (a required property) was received
    if !milestones_urlReceived {
        return errors.New("\"milestones_url\" is required but was not present")
    }
    // check if name (a required property) was received
    if !nameReceived {
        return errors.New("\"name\" is required but was not present")
    }
    // check if node_id (a required property) was received
    if !node_idReceived {
        return errors.New("\"node_id\" is required but was not present")
    }
    // check if notifications_url (a required property) was received
    if !notifications_urlReceived {
        return errors.New("\"notifications_url\" is required but was not present")
    }
    // check if owner (a required property) was received
    if !ownerReceived {
        return errors.New("\"owner\" is required but was not present")
    }
    // check if private (a required property) was received
    if !privateReceived {
        return errors.New("\"private\" is required but was not present")
    }
    // check if pulls_url (a required property) was received
    if !pulls_urlReceived {
        return errors.New("\"pulls_url\" is required but was not present")
    }
    // check if releases_url (a required property) was received
    if !releases_urlReceived {
        return errors.New("\"releases_url\" is required but was not present")
    }
    // check if stargazers_url (a required property) was received
    if !stargazers_urlReceived {
        return errors.New("\"stargazers_url\" is required but was not present")
    }
    // check if statuses_url (a required property) was received
    if !statuses_urlReceived {
        return errors.New("\"statuses_url\" is required but was not present")
    }
    // check if subscribers_url (a required property) was received
    if !subscribers_urlReceived {
        return errors.New("\"subscribers_url\" is required but was not present")
    }
    // check if subscription_url (a required property) was received
    if !subscription_urlReceived {
        return errors.New("\"subscription_url\" is required but was not present")
    }
    // check if tags_url (a required property) was received
    if !tags_urlReceived {
        return errors.New("\"tags_url\" is required but was not present")
    }
    // check if teams_url (a required property) was received
    if !teams_urlReceived {
        return errors.New("\"teams_url\" is required but was not present")
    }
    // check if trees_url (a required property) was received
    if !trees_urlReceived {
        return errors.New("\"trees_url\" is required but was not present")
    }
    // check if url (a required property) was received
    if !urlReceived {
        return errors.New("\"url\" is required but was not present")
    }
    return nil
}

func (strct *SimpleUser) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "AvatarUrl" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "avatar_url" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"avatar_url\": ")
	if tmp, err := json.Marshal(strct.AvatarUrl); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "email" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"email\": ")
	if tmp, err := json.Marshal(strct.Email); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "EventsUrl" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "events_url" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"events_url\": ")
	if tmp, err := json.Marshal(strct.EventsUrl); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "FollowersUrl" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "followers_url" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"followers_url\": ")
	if tmp, err := json.Marshal(strct.FollowersUrl); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "FollowingUrl" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "following_url" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"following_url\": ")
	if tmp, err := json.Marshal(strct.FollowingUrl); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "GistsUrl" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "gists_url" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"gists_url\": ")
	if tmp, err := json.Marshal(strct.GistsUrl); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "GravatarId" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "gravatar_id" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"gravatar_id\": ")
	if tmp, err := json.Marshal(strct.GravatarId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "HtmlUrl" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "html_url" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"html_url\": ")
	if tmp, err := json.Marshal(strct.HtmlUrl); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Id" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "id" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Login" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "login" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"login\": ")
	if tmp, err := json.Marshal(strct.Login); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "NodeId" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "node_id" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"node_id\": ")
	if tmp, err := json.Marshal(strct.NodeId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "OrganizationsUrl" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "organizations_url" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"organizations_url\": ")
	if tmp, err := json.Marshal(strct.OrganizationsUrl); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "ReceivedEventsUrl" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "received_events_url" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"received_events_url\": ")
	if tmp, err := json.Marshal(strct.ReceivedEventsUrl); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "ReposUrl" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "repos_url" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"repos_url\": ")
	if tmp, err := json.Marshal(strct.ReposUrl); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "SiteAdmin" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "site_admin" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"site_admin\": ")
	if tmp, err := json.Marshal(strct.SiteAdmin); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "starred_at" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"starred_at\": ")
	if tmp, err := json.Marshal(strct.StarredAt); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "StarredUrl" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "starred_url" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"starred_url\": ")
	if tmp, err := json.Marshal(strct.StarredUrl); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "SubscriptionsUrl" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "subscriptions_url" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"subscriptions_url\": ")
	if tmp, err := json.Marshal(strct.SubscriptionsUrl); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Type" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "type" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"type\": ")
	if tmp, err := json.Marshal(strct.Type); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Url" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "url" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"url\": ")
	if tmp, err := json.Marshal(strct.Url); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *SimpleUser) UnmarshalJSON(b []byte) error {
    avatar_urlReceived := false
    events_urlReceived := false
    followers_urlReceived := false
    following_urlReceived := false
    gists_urlReceived := false
    gravatar_idReceived := false
    html_urlReceived := false
    idReceived := false
    loginReceived := false
    node_idReceived := false
    organizations_urlReceived := false
    received_events_urlReceived := false
    repos_urlReceived := false
    site_adminReceived := false
    starred_urlReceived := false
    subscriptions_urlReceived := false
    typeReceived := false
    urlReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "avatar_url":
            if err := json.Unmarshal([]byte(v), &strct.AvatarUrl); err != nil {
                return err
             }
            avatar_urlReceived = true
        case "email":
            if err := json.Unmarshal([]byte(v), &strct.Email); err != nil {
                return err
             }
        case "events_url":
            if err := json.Unmarshal([]byte(v), &strct.EventsUrl); err != nil {
                return err
             }
            events_urlReceived = true
        case "followers_url":
            if err := json.Unmarshal([]byte(v), &strct.FollowersUrl); err != nil {
                return err
             }
            followers_urlReceived = true
        case "following_url":
            if err := json.Unmarshal([]byte(v), &strct.FollowingUrl); err != nil {
                return err
             }
            following_urlReceived = true
        case "gists_url":
            if err := json.Unmarshal([]byte(v), &strct.GistsUrl); err != nil {
                return err
             }
            gists_urlReceived = true
        case "gravatar_id":
            if err := json.Unmarshal([]byte(v), &strct.GravatarId); err != nil {
                return err
             }
            gravatar_idReceived = true
        case "html_url":
            if err := json.Unmarshal([]byte(v), &strct.HtmlUrl); err != nil {
                return err
             }
            html_urlReceived = true
        case "id":
            if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
                return err
             }
            idReceived = true
        case "login":
            if err := json.Unmarshal([]byte(v), &strct.Login); err != nil {
                return err
             }
            loginReceived = true
        case "name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
        case "node_id":
            if err := json.Unmarshal([]byte(v), &strct.NodeId); err != nil {
                return err
             }
            node_idReceived = true
        case "organizations_url":
            if err := json.Unmarshal([]byte(v), &strct.OrganizationsUrl); err != nil {
                return err
             }
            organizations_urlReceived = true
        case "received_events_url":
            if err := json.Unmarshal([]byte(v), &strct.ReceivedEventsUrl); err != nil {
                return err
             }
            received_events_urlReceived = true
        case "repos_url":
            if err := json.Unmarshal([]byte(v), &strct.ReposUrl); err != nil {
                return err
             }
            repos_urlReceived = true
        case "site_admin":
            if err := json.Unmarshal([]byte(v), &strct.SiteAdmin); err != nil {
                return err
             }
            site_adminReceived = true
        case "starred_at":
            if err := json.Unmarshal([]byte(v), &strct.StarredAt); err != nil {
                return err
             }
        case "starred_url":
            if err := json.Unmarshal([]byte(v), &strct.StarredUrl); err != nil {
                return err
             }
            starred_urlReceived = true
        case "subscriptions_url":
            if err := json.Unmarshal([]byte(v), &strct.SubscriptionsUrl); err != nil {
                return err
             }
            subscriptions_urlReceived = true
        case "type":
            if err := json.Unmarshal([]byte(v), &strct.Type); err != nil {
                return err
             }
            typeReceived = true
        case "url":
            if err := json.Unmarshal([]byte(v), &strct.Url); err != nil {
                return err
             }
            urlReceived = true
        }
    }
    // check if avatar_url (a required property) was received
    if !avatar_urlReceived {
        return errors.New("\"avatar_url\" is required but was not present")
    }
    // check if events_url (a required property) was received
    if !events_urlReceived {
        return errors.New("\"events_url\" is required but was not present")
    }
    // check if followers_url (a required property) was received
    if !followers_urlReceived {
        return errors.New("\"followers_url\" is required but was not present")
    }
    // check if following_url (a required property) was received
    if !following_urlReceived {
        return errors.New("\"following_url\" is required but was not present")
    }
    // check if gists_url (a required property) was received
    if !gists_urlReceived {
        return errors.New("\"gists_url\" is required but was not present")
    }
    // check if gravatar_id (a required property) was received
    if !gravatar_idReceived {
        return errors.New("\"gravatar_id\" is required but was not present")
    }
    // check if html_url (a required property) was received
    if !html_urlReceived {
        return errors.New("\"html_url\" is required but was not present")
    }
    // check if id (a required property) was received
    if !idReceived {
        return errors.New("\"id\" is required but was not present")
    }
    // check if login (a required property) was received
    if !loginReceived {
        return errors.New("\"login\" is required but was not present")
    }
    // check if node_id (a required property) was received
    if !node_idReceived {
        return errors.New("\"node_id\" is required but was not present")
    }
    // check if organizations_url (a required property) was received
    if !organizations_urlReceived {
        return errors.New("\"organizations_url\" is required but was not present")
    }
    // check if received_events_url (a required property) was received
    if !received_events_urlReceived {
        return errors.New("\"received_events_url\" is required but was not present")
    }
    // check if repos_url (a required property) was received
    if !repos_urlReceived {
        return errors.New("\"repos_url\" is required but was not present")
    }
    // check if site_admin (a required property) was received
    if !site_adminReceived {
        return errors.New("\"site_admin\" is required but was not present")
    }
    // check if starred_url (a required property) was received
    if !starred_urlReceived {
        return errors.New("\"starred_url\" is required but was not present")
    }
    // check if subscriptions_url (a required property) was received
    if !subscriptions_urlReceived {
        return errors.New("\"subscriptions_url\" is required but was not present")
    }
    // check if type (a required property) was received
    if !typeReceived {
        return errors.New("\"type\" is required but was not present")
    }
    // check if url (a required property) was received
    if !urlReceived {
        return errors.New("\"url\" is required but was not present")
    }
    return nil
}
